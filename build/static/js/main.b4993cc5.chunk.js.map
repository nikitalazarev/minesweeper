{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["_","require","App","props","state","cellsMount","row","col","minesMount","result","isWin","open","winTitles","cells","Array","openCell","bind","markCell","restart","pos","updatedCells","this","map","el","isMine","cell","openedEmpty","i","length","j","cellsAround","minesAround","includes","id","push","setState","checkResult","action","rightMarked","wrongMarked","arr","shuffle","range","minesCells","cellCounter","koef","minesCounter","className","onClick","children","Component","TableCells","tableCells","cellsArr","content","key","onContextMenu","e","preventDefault","Button","type","Result","title","titleState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b4993cc5.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nconst _:any = require('underscore')\n\ninterface Pos{\n  row: number,\n  col: number\n}\ninterface Cell{ \n  id: number,\n  pos: {\n    row: number,\n    col: number\n  },\n  isMine: boolean,\n  cellsAround: Cell[],\n  minesAround: null | number,\n  state: string,\n}\n\ninterface State{\n  cellsMount: {\n    row: number,\n    col: number,\n  },\n  minesMount: number,\n  result: {isWin: boolean, open: boolean},\n  winTitles: [string, string],\n  cells: Cell[][]\n}\n\nclass App extends Component<any, State> {\n  constructor(props:any) {\n    super(props);\n    this.state = {\n      cellsMount: {\n        row: 8,\n        col: 10,\n      },\n      minesMount: 10,\n      result: {isWin: false, open: false},\n      winTitles: ['YOU WIN!', 'GAME OVER'],\n      cells: new Array<Array<Cell>>()\n    };\n\n    this.openCell = this.openCell.bind(this)\n    this.markCell = this.markCell.bind(this)\n    this.restart = this.restart.bind(this)\n  }\n\n  openCell(pos: Pos):void {\n    const updatedCells = this.state.cells.map( (el: Cell[]) => el);\n\n    if(updatedCells[pos.row][pos.col].state !== 'mark'){\n      updatedCells[pos.row][pos.col].state = 'open';\n\n      if(updatedCells[pos.row][pos.col].isMine){\n        updatedCells.map( (el: Cell[]) => {\n          el.map( (cell: Cell) => {\n            if(cell.isMine){\n              cell.state = 'open mine inactive'\n            }else{\n              cell.state = `${cell.state} inactive`\n            }\n          })\n        })\n      }else{\n        const openedEmpty:number[]  = [];\n        for(let i = 0; i < updatedCells.length; i++){\n          for(let j = 0; j < updatedCells[i].length; j++){\n            if(updatedCells[i][j].cellsAround \n              && updatedCells[i][j].minesAround === 0 \n              && updatedCells[i][j].state === 'open' \n              && !openedEmpty.includes(updatedCells[i][j].id)){\n                updatedCells[i][j].cellsAround.map( (cell: Cell) => {\n                  cell.state = 'open';\n                })\n                openedEmpty.push(updatedCells[i][j].id);\n                i = 0;\n                j = 0;\n            }\n          }\n        }\n      }\n\n      this.setState({cells: updatedCells});\n      this.checkResult('open',updatedCells);\n    }\n  }\n\n  markCell(pos: Pos):void {\n    const updatedCells = this.state.cells.map( (el: Cell[]) => el);\n\n    if(updatedCells[pos.row][pos.col].state === 'close'){\n      updatedCells[pos.row][pos.col].state = 'mark';\n    }else if(updatedCells[pos.row][pos.col].state === 'mark'){\n      updatedCells[pos.row][pos.col].state = 'close'\n    }\n\n    this.setState({cells: updatedCells});\n    this.checkResult('mark',updatedCells);\n  }\n\n  checkResult(action: string, updatedCells: Cell[][]):void {\n    if(action === 'mark'){\n      let rightMarked = 0;\n      let wrongMarked = 0;\n      updatedCells.map( (el: Cell[]) => {\n        el.map( (cell: Cell) => {\n          if(cell.state === 'mark'){\n            if(cell.isMine){\n              rightMarked++;\n            }else{\n              wrongMarked++;\n            }\n          }\n        })\n      });\n\n      const isWin:boolean = (rightMarked === this.state.minesMount && !wrongMarked) ? true : false\n\n      if(isWin){\n        updatedCells.map( (el: Cell[]) => {\n          el.map( (cell: Cell) => {\n            cell.state = cell.state + ' inactive'\n          })\n        })\n      }\n\n      if(isWin){\n        this.setState({cells: updatedCells, result: {isWin, open: true}})\n      }\n    }\n    if(action === 'open'){\n      let isWin:boolean = true;\n      updatedCells.map( (el: Cell[]) => {\n        el.map( (cell: Cell) => {\n          if(cell.state === 'open mine inactive'){\n            isWin = false\n          }\n        })\n      })\n\n      if(!isWin){\n        this.setState({result: {isWin, open: true}})\n      }\n    }\n  }\n\n  restart():void {\n    const {\n      minesMount,\n      cellsMount,\n    } = this.state;\n\n    \n    const arr:number[] = _.shuffle(_.range(cellsMount.row * cellsMount.col));\n    const minesCells:number[] = _.range(minesMount).map( (el:number) => arr[el] );\n\n    let cells:Cell[][] = new Array<Array<Cell>>();\n    let cellCounter:number = 0;\n    for(let i = 0; i < cellsMount.row; i++){\n      cells[i] = new Array<Cell>();\n      for(let j = 0; j < cellsMount.col; j++){\n        const cell:Cell = {\n          id: cellCounter,\n          pos: {\n            row: i,\n            col: j\n          },\n          isMine: minesCells.includes(cellCounter),\n          cellsAround: new Array<Cell>(),\n          minesAround: null,\n          state: 'close',\n        }\n        cells[i].push(cell);\n        cellCounter++;\n      }\n    }\n\n    cells.map((el:Cell[]) => {\n      el.map((cell:Cell) => {\n        if(!cell.isMine){\n            let koef:number = -1;\n            let minesCounter:number = 0;\n            for(let i = 0; i < 3; i++){\n              if(cells[cell.pos.row - 1] && cells[cell.pos.row - 1][cell.pos.col + koef]){\n                cell.cellsAround.push(cells[cell.pos.row - 1][cell.pos.col + koef])\n                if(cells[cell.pos.row - 1][cell.pos.col + koef].isMine){\n                  minesCounter++;\n                }\n              }\n              if(cells[cell.pos.row + 1] && cells[cell.pos.row + 1][cell.pos.col + koef]){\n                cell.cellsAround.push(cells[cell.pos.row + 1] && cells[cell.pos.row + 1][cell.pos.col + koef]);\n                if(cells[cell.pos.row + 1][cell.pos.col + koef].isMine){\n                  minesCounter++;\n                }\n              }\n              koef++;\n            }\n            koef = -1;\n            for(let i = 0; i < 2; i++){\n              if(cells[cell.pos.row][cell.pos.col + koef]){\n                cell.cellsAround.push(cells[cell.pos.row][cell.pos.col + koef])\n                if(cells[cell.pos.row][cell.pos.col + koef].isMine){\n                  minesCounter++;\n                }\n              }\n              koef = 1;\n            }\n            cell.minesAround = minesCounter;\n        }\n      })\n    })\n\n    this.setState({cells: cells, result: {isWin: this.state.result.isWin, open: false}});   \n  }\n\n  componentDidMount():void {\n    const {\n      minesMount,\n      cellsMount\n    } = this.state;\n\n    \n    const arr:number[] = _.shuffle(_.range(cellsMount.row * cellsMount.col));\n    const minesCells:number[] = _.range(minesMount).map( (el:number) => arr[el] );\n\n    let cells:Cell[][] = new Array<Array<Cell>>();\n    let cellCounter = 0;\n    for(let i = 0; i < cellsMount.row; i++){\n      cells[i] = new Array<Cell>();\n      for(let j = 0; j < cellsMount.col; j++){\n        const cell = {\n          id: cellCounter,\n          pos: {\n            row: i,\n            col: j\n          },\n          isMine: minesCells.includes(cellCounter),\n          cellsAround: new Array<Cell>(),\n          minesAround: null,\n          state: 'close',\n        }\n        cells[i].push(cell);\n        cellCounter++;\n      }\n    }\n\n    cells.map((el:Cell[]) => {\n      el.map((cell:Cell) => {\n        if(!cell.isMine){\n          let koef:number = -1;\n          let minesCounter:number = 0;\n          for(let i = 0; i < 3; i++){\n            if(cells[cell.pos.row - 1] && cells[cell.pos.row - 1][cell.pos.col + koef]){\n              cell.cellsAround.push(cells[cell.pos.row - 1][cell.pos.col + koef])\n              if(cells[cell.pos.row - 1][cell.pos.col + koef].isMine){\n                minesCounter++;\n              }\n            }\n            if(cells[cell.pos.row + 1] && cells[cell.pos.row + 1][cell.pos.col + koef]){\n              cell.cellsAround.push(cells[cell.pos.row + 1] && cells[cell.pos.row + 1][cell.pos.col + koef]);\n              if(cells[cell.pos.row + 1][cell.pos.col + koef].isMine){\n                minesCounter++;\n              }\n            }\n            koef++;\n          }\n          koef = -1;\n          for(let i = 0; i < 2; i++){\n            if(cells[cell.pos.row][cell.pos.col + koef]){\n              cell.cellsAround.push(cells[cell.pos.row][cell.pos.col + koef])\n              if(cells[cell.pos.row][cell.pos.col + koef].isMine){\n                minesCounter++;\n              }\n            }\n            koef = 1;\n          }\n          cell.minesAround = minesCounter;\n        }\n      })\n    })\n\n    this.setState({cells: cells});\n  }\n\n  render() {\n    const {\n      result,\n      cells\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Result\n          result = {result}\n        />\n        <div className = 'tableCells'>\n        <TableCells \n          cells = {cells}\n          openCell = {this.openCell}\n          markCell = {this.markCell}\n        />\n        <Button \n          onClick = {this.restart}\n          children = {'restart'}\n          className = {'button-restart'}\n        />\n        </div>\n      </div>\n    );\n  }\n}\n\ninterface TableCellsProps {\n  cells: Cell[][],\n  openCell:(pos:Pos) => void,\n  markCell:(pos:Pos) => void\n}\n\nconst TableCells = ({\n  cells,\n  openCell,\n  markCell\n}:TableCellsProps) => {\n  let tableCells = cells.map((el:Cell[], i:number) => {\n      let cellsArr = el.map((cell:Cell, j:number) => {\n        let content:string | null = null;\n        if(cell.isMine){\n          content = '*'\n        }else if(cell.minesAround){\n          content = `${cell.minesAround}`\n        }\n          return  (\n            <div \n              className = {`cell ${cell.state}`}\n              key = {`cell-${cell.id}`}\n              onClick = { () => openCell(cell.pos)}\n              onContextMenu = { (e:React.MouseEvent) => {\n                e.preventDefault();\n                return markCell(cell.pos);\n              }}\n            >\n              <div className = 'value'>\n                {content}\n              </div>\n            </div>\n            )\n      });\n      return (\n        <div className = 'cellsRow' key={`cellsRow-${i}`}>{cellsArr}</div>\n        )\n    })\n    return (<>{tableCells}</>)\n}\n\ninterface ButtonProps{\n  onClick:(e:React.MouseEvent) => void,\n  className: string,\n  children: React.ReactNode\n}\n\nconst Button = ({ onClick, className = '', children }:ButtonProps) =>\n  <button\n    onClick={onClick}\n    className={className}\n    type=\"button\"\n  >\n    {children}\n  </button>\n\n\ninterface ResultProps{\n  result: {isWin: null | boolean, open: boolean}\n}\nconst Result = ({result}:ResultProps) =>{\n  let title:string = result.isWin ? 'YOU WIN!' : 'GAME OVER';\n  let titleState:string = result.open ? 'result open' : 'result close';\n  return (\n    <div\n      className = {titleState}\n    >{title}</div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}